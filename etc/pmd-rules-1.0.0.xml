<?xml version="1.0" encoding="UTF-8"?>

<ruleset name="AMA-Favorites"
    xmlns="http://pmd.sf.net/ruleset/1.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd"
    xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd">

  <description>
	The Favorites ruleset contains links to rules that I like to use.  Usually I
	combine this ruleset with the unusedcode.xml, basic.xml, and import.xml rulesets for my projects.
	This ruleset also serves as an example of how to do a custom ruleset. 
	Moving forward you may see adding new rules to this file.
  </description>
 
  <!-- The Basic Ruleset contains a collection of good practices which everyone should follow. -->
  <!-- See http://pmd.sourceforge.net/rules/basic.html -->
  <rule ref="rulesets/basic.xml"/>
 
  <!-- The Braces Ruleset contains a collection of braces rules.  -->
  <!-- See http://pmd.sourceforge.net/rules/braces.html -->
  <rule ref="rulesets/braces.xml"/>


  <!-- The Code Size Ruleset contains a collection of rules that find code size related problems.
  	   ExcessiveMethodLength, ExcessiveParameterList, ExcessiveClassLength, CyclomaticComplexity is already in checkstyle.
  	   No need of ExcessivePublicCount
  -->
  <!-- See http://pmd.sourceforge.net/rules/codesize.html -->
   <rule ref="rulesets/codesize.xml/NPathComplexity">
    <properties>
        <property name="minimum" value="150"/>
    </properties>
  </rule>
   
  <!-- The Unused Code Ruleset contains a collection of rules that find unused code. -->
  <!-- See http://pmd.sourceforge.net/rules/unusedcode.html -->
  <rule ref="rulesets/unusedcode.xml"/>


  <rule ref="rulesets/codesize.xml/CyclomaticComplexity">
      <properties>
         <property name="reportLevel" value="5"/>
      </properties>
    </rule>
    
  <!-- These are rules which find instances of high or inappropriate coupling between objects and packages. -->
  <!-- See http://pmd.sourceforge.net/rules/controversial.html -->
  <rule ref="rulesets/controversial.xml/UnnecessaryParentheses"/>
  <rule ref="rulesets/controversial.xml/BooleanInversion"/>
  
  <!-- These are rules which find instances of high or inappropriate coupling between objects and packages. -->
  <!-- See http://pmd.sourceforge.net/rules/coupling.html -->
  <rule ref="rulesets/coupling.xml/LooseCoupling" />
    
  <!-- The Design Ruleset contains a collection of rules that find questionable designs. -->
  <!-- See http://pmd.sourceforge.net/rules/design.html -->
  <rule ref="rulesets/design.xml/CloseResource" />
  <rule ref="rulesets/design.xml/InstantiationToGetClass" />
  <rule ref="rulesets/design.xml/IdempotentOperations" />
  <rule ref="rulesets/design.xml/ImmutableField" />
  <rule ref="rulesets/design.xml/AvoidProtectedFieldInFinalClass" />
  <rule ref="rulesets/design.xml/AssignmentToNonFinalStatic" />
  <rule ref="rulesets/design.xml/MissingStaticMethodInNonInstantiatableClass" />
  <rule ref="rulesets/design.xml/AvoidSynchronizedAtMethodLevel" />
  <rule ref="rulesets/design.xml/MissingBreakInSwitch" />
  <rule ref="rulesets/design.xml/AvoidInstanceofChecksInCatchClause" />
  <rule ref="rulesets/design.xml/AbstractClassWithoutAbstractMethod" />
  <rule ref="rulesets/design.xml/SimplifyConditional" />
  <rule ref="rulesets/design.xml/UnnecessaryLocalBeforeReturn" />
  <rule ref="rulesets/design.xml/NonThreadSafeSingleton" />
  <rule ref="rulesets/design.xml/UnsynchronizedStaticDateFormatter" />
  <rule ref="rulesets/design.xml/UseCollectionIsEmpty" />
  
  <!-- These rules deal with different problems that can occur with JUnit tests. -->
  <!-- See http://pmd.sourceforge.net/rules/junit.html -->
  <rule ref="rulesets/junit.xml">
    <exclude name="JUnitSpelling"/>
  </rule>
  
  <!-- The Naming Ruleset contains a collection of rules about names - too long, too short, and so forth.-->
  <!-- See http://pmd.sourceforge.net/rules/naming.html
  <rule ref="rulesets/naming.xml/GenericsNaming" />  -->
  
  <!-- These rules deal with different optimizations that generally apply to performance best practices. -->
  <!-- See http://pmd.sourceforge.net/rules/optimizations.html -->
  <rule ref="rulesets/optimizations.xml/AvoidInstantiatingObjectsInLoops" />
  <rule ref="rulesets/optimizations.xml/UseArrayListInsteadOfVector" />
  <rule ref="rulesets/optimizations.xml/UseStringBufferForStringAppends" />
  <rule ref="rulesets/optimizations.xml/AvoidArrayLoops" />
  <rule ref="rulesets/optimizations.xml/UnnecessaryWrapperObjectCreation" />
  <rule ref="rulesets/optimizations.xml/AddEmptyString" />
  
   <!-- These rules provide some strict guidelines about throwing and catching exceptions. -->
  <!-- See http://pmd.sourceforge.net/rules/strictexception.html -->
  <rule ref="rulesets/strictexception.xml" />
  
  <!-- These rules deal with different problems that can occur with manipulation of the class String or StringBuffer. -->
  <!-- See http://pmd.sourceforge.net/rules/strings.html -->
  <rule ref="rulesets/strings.xml" />
  
  <!-- These rules check the security guidelines from Sun, published at http://java.sun.com/security/seccodeguide.html#gcg -->
  <!-- See http://pmd.sourceforge.net/rules/sunsecure.html -->
  <rule ref="rulesets/sunsecure.xml" />


</ruleset>




